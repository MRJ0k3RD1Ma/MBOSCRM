generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                     Int          @id @default(autoincrement())
  typeId                 Int?
  name                   String       @db.VarChar(255)
  inn                    String       @db.VarChar(255)
  regionId               Int?
  districtId             Int?
  address                String?      @db.VarChar(255)
  balance                Float        @default(0)
  description            String?      @db.Text
  registerId             Int?
  modifyId               Int?
  isDeleted              Boolean?     @default(false)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @default(now()) @updatedAt
  phone                  String       @db.VarChar(255)
  District               District?    @relation(fields: [districtId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Client_modifyId   User?        @relation("Client_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Client_registerId User?        @relation("Client_registerId", fields: [registerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Region                 Region?      @relation(fields: [regionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ClientType             ClientType?  @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Sale                   Sale[]
  PaidClient             PaidClient[]
  Subscribe              Subscribe[]

  @@index([districtId], map: "FK_client_district_id")
  @@index([modifyId], map: "FK_client_modify_id")
  @@index([regionId], map: "FK_client_region_id")
  @@index([registerId], map: "FK_client_register_id")
  @@index([typeId], map: "FK_client_type_id")
  @@map("client")
}

model ClientType {
  id                         Int      @id @default(autoincrement())
  name                       String
  creatorId                  Int?
  modifyId                   Int?
  isDeleted                  Boolean  @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @default(now()) @updatedAt
  Client                     Client[]
  User_ClientType_modifyId   User?    @relation("ClientType_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_ClientType_registerId User?    @relation("ClientType_registerId", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([modifyId], map: "FK_client_type_modify_id")
  @@index([creatorId], map: "FK_client_type_register_id")
  @@map("client_type")
}

model District {
  id       Int      @id @default(autoincrement())
  regionId Int?
  name     String?  @db.VarChar(255)
  Client   Client[]

  @@map("district")
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  barcode        String?          @db.VarChar(255)
  barcodeId      Int?             @unique()
  groupId        Int
  unitId         Int?
  priceIncome    Float            @default(0)
  reminderFirst  Float            @default(0)
  price          Float            @default(0)
  type           ProductType
  countReminder  Float            @default(0)
  countArrived   Float            @default(0)
  countSale      Float            @default(0)
  isDeleted      Boolean?         @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  registerId     Int?
  modifyId       Int?
  ProductGroup   ProductGroup     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modify         User?            @relation("Product_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  register       User?            @relation("Product_creatorId", fields: [registerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ProductUnit    ProductUnit?     @relation(fields: [unitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ArrivedProduct ArrivedProduct[]
  SaleProduct    SaleProduct[]

  @@index([groupId], map: "FK_product_group_id")
  @@index([modifyId], map: "FK_product_modify_id")
  @@index([registerId], map: "FK_product_register_id")
  @@index([unitId], map: "FK_product_unit_id")
  @@map("product")
}

model ProductGroup {
  id         Int       @id @default(autoincrement())
  name       String
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  registerId Int
  modifyId   Int
  Product    Product[]
  modify     User      @relation("ProductGroup_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  register   User      @relation("ProductGroup_creatorId", fields: [registerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([modifyId], map: "FK_product_group_modify_id")
  @@index([registerId], map: "FK_product_group_register_id")
  @@map("product_group")
}

model ProductUnit {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  Product    Product[]
  registerId Int?
  modifyId   Int?
  register   User?     @relation("ProductUnit_registerId", fields: [registerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modify     User?     @relation("ProductUnit_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([registerId], map: "FK_product_unit_register_id")
  @@map("product_unit")
}

model Region {
  id     Int      @id @default(autoincrement())
  name   String?
  Client Client[]

  @@map("region")
}

model Setting {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  balance Float  @default(0)

  @@map("setting")
}

model User {
  id                                       Int              @id @default(autoincrement())
  name                                     String           @db.VarChar(255)
  username                                 String           @db.VarChar(255)
  password                                 String           @db.VarChar(500)
  phone                                    String?          @db.VarChar(255)
  roleId                                   Int?
  isDeleted                                Boolean?         @default(false)
  createdAt                                DateTime         @default(now())
  updatedAt                                DateTime         @default(now()) @updatedAt
  chatId                                   String?          @db.VarChar(255)
  Client_Client_modifyId                   Client[]         @relation("Client_modifyId")
  Client_Client_registerId                 Client[]         @relation("Client_registerId")
  ClientType_ClientType_modifyId           ClientType[]     @relation("ClientType_modifyId")
  ClientType_ClientType_registerId         ClientType[]     @relation("ClientType_registerId")
  Product_Product_modifyId                 Product[]        @relation("Product_modifyId")
  Product_Product_creatorId                Product[]        @relation("Product_creatorId")
  ProductGroup_ProductGroup_modifyId       ProductGroup[]   @relation("ProductGroup_modifyId")
  ProductGroup_ProductGroup_creatorId      ProductGroup[]   @relation("ProductGroup_creatorId")
  ProductUnit_ProductUnit_registerId       ProductUnit[]    @relation("ProductUnit_registerId")
  ProductUnit_ProductUnit_modifyId         ProductUnit[]    @relation("ProductUnit_modifyId")
  Arrived_Arrived_registerId               Arrived[]        @relation("Arrived_registerId")
  Arrived_Arrived_modifyId                 Arrived[]        @relation("Arrived_modifyId")
  ArrivedProduct_ArrivedProduct_registerId ArrivedProduct[] @relation("ArrivedProduct_registerId")
  ArrivedProduct_ArrivedProduct_modifyId   ArrivedProduct[] @relation("ArrivedProduct_modifyId")
  PaidSupplier_PaidSupplier_registerId     PaidSupplier[]   @relation("PaidSupplier_registerId")
  PaidSupplier_PaidSupplier_modifyId       PaidSupplier[]   @relation("PaidSupplier_modifyId")
  Supplier_Supplier_registerId             Supplier[]       @relation("Supplier_registerId")
  Supplier_Supplier_modifyId               Supplier[]       @relation("Supplier_modifyId")
  Sale_Sale_registerId                     Sale[]           @relation("RegisterRelation")
  Sale_Sale_modifyId                       Sale[]           @relation("ModifyRelation")
  SaleProduct_SaleProduct_registerId       SaleProduct[]    @relation("RegisterRelation")
  SaleProduct_SaleProduct_modifyId         SaleProduct[]    @relation("ModifyRelation")
  PaidClient_PaidClient_registerId         PaidClient[]     @relation("PaidClient_registerId")
  PaidClient_PaidClient_modifyId           PaidClient[]     @relation("PaidClient_modifyId")
  PaidServer_PaidServer_registerId         PaidServer[]     @relation("PaidServer_registerId")
  PaidServer_PaidServer_modifyId           PaidServer[]     @relation("PaidServer_modifyId")
  Server_Server_registerId                 Server[]         @relation("Server_register")
  Server_Server_modifyId                   Server[]         @relation("Server_modify")
  Payment_Payment_registerId               Payment[]        @relation("Payment_registerId")
  Payment_Payment_modifyId                 Payment[]        @relation("Payment_modifyId")
  PaidOther_PaidOther_registerId           PaidOther[]      @relation("PaidOther_registerId")
  PaidOther_PaidOther_modifyId             PaidOther[]      @relation("PaidOther_modifyId")
  PaidOtherGroup_PaidOtherGroup_registerId PaidOtherGroup[] @relation("PaidOtherGroup_registerId")
  PaidOtherGroup_PaidOtherGroup_modifyId   PaidOtherGroup[] @relation("PaidOtherGroup_modifyId")
  UserRole                                 UserRole?        @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([roleId], map: "FK_user_role_id")
  @@map("user")
}

model Arrived {
  id             Int              @id @default(autoincrement())
  date           DateTime?        @db.Date
  code           String?          @db.VarChar(255)
  codeId         Int?             @default(1)
  waybillNumber  String?          @map("waybill_number") @db.VarChar(255)
  supplier       Supplier         @relation(fields: [supplierId], references: [id])
  supplierId     Int              @default(1) @map("supplier_id")
  description    String?          @db.Text
  price          Float            @default(0)
  isDeleted      Boolean?         @default(false)
  created        DateTime         @default(now())
  updated        DateTime         @default(now()) @updatedAt
  registerId     Int?
  modifyId       Int?
  ArrivedProduct ArrivedProduct[]

  register User? @relation("Arrived_registerId", fields: [registerId], references: [id])
  modify   User? @relation("Arrived_modifyId", fields: [modifyId], references: [id])

  @@map("arrived")
}

model ArrivedProduct {
  id         Int      @id @default(autoincrement())
  arrivedId  Int?     @map("arrived_id")
  productId  Int?     @map("product_id")
  count      Float    @default(0)
  price      Float?
  priceCount Float?   @map("price_count")
  isDeleted  Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  Arrived    Arrived? @relation(fields: [arrivedId], references: [id])
  Product    Product? @relation(fields: [productId], references: [id])
  registerId Int?
  modifyId   Int?
  register   User?    @relation("ArrivedProduct_registerId", fields: [registerId], references: [id])
  modify     User?    @relation("ArrivedProduct_modifyId", fields: [modifyId], references: [id])

  @@index([arrivedId], map: "arrived_id")
  @@index([productId], map: "product_id")
  @@map("arrived_product")
}

model PaidSupplier {
  id         Int       @id @default(autoincrement())
  supplierId Int?      @map("suppler_id")
  paidDate   DateTime? @map("paid_date")
  price      Float?
  paymentId  Int?      @map("payment_id")
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  registerId Int?
  modifyId   Int?
  register   User?     @relation("PaidSupplier_registerId", fields: [registerId], references: [id])
  modify     User?     @relation("PaidSupplier_modifyId", fields: [modifyId], references: [id])
  Payment    Payment?  @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // Assuming 'supplier' refers to a User or a dedicated Supplier model if it exists
  // User_PaidSupplier_registerId User? @relation("PaidSupplier_registerId", fields: [registerId], references: [id])
  // User_PaidSupplier_modifyId User? @relation("PaidSupplier_modifyId", fields: [modifyId], references: [id])

  @@index([paymentId], map: "payment_id")
  @@map("paid_suppler")
}

model Supplier {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  phone       String    @db.VarChar(255)
  phoneTwo    String?   @map("phone_two") @db.VarChar(255)
  description String?   @db.Text
  balance     Float     @default(0)
  isDeleted   Boolean?  @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  registerId  Int?
  modifyId    Int?
  arrived     Arrived[]
  register    User?     @relation("Supplier_registerId", fields: [registerId], references: [id])
  modify      User?     @relation("Supplier_modifyId", fields: [modifyId], references: [id])

  @@map("suppler")
}

model Sale {
  id         Int       @id @default(autoincrement())
  date       DateTime? @db.Date
  code       String?   @db.VarChar(255)
  codeId     Int?      @default(1)
  client     Client    @relation(fields: [clientId], references: [id])
  clientId   Int       @default(1) @map("client_id")
  price      Float     @default(0)
  dept       Float     @default(0)
  credit     Float     @default(0)
  state      SaleState @default(CLOSED)
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  register   User?     @relation("RegisterRelation", fields: [registerId], references: [id])
  registerId Int?

  modifier               User?         @relation("ModifyRelation", fields: [modifyId], references: [id])
  modifyId               Int?
  clientName             String?       @db.VarChar(255)
  SaleProduct            SaleProduct[]
  subscribe_begin_date   DateTime?
  subscribe_generate_day Int?
  Subscribe              Subscribe[]
  PaidClient             PaidClient[]
}

model SaleProduct {
  id           Int       @id @default(autoincrement())
  saleId       Int?
  sale         Sale?     @relation(fields: [saleId], references: [id])
  productId    Int?
  product      Product?  @relation(fields: [productId], references: [id])
  price        Float?
  count        Float?
  priceCount   Float?
  is_subscribe Boolean?  @default(false)
  registerId   Int?
  modifyId     Int?
  isDeleted    Boolean?  @default(false)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
  register     User?     @relation("RegisterRelation", fields: [registerId], references: [id])
  modify       User?     @relation("ModifyRelation", fields: [modifyId], references: [id])

  @@index([saleId])
  @@index([productId])
  @@index([registerId])
  @@index([modifyId])
}

model PaidClient {
  id         Int       @id @default(autoincrement())
  clientId   Int?      @map("client_id")
  saleId     Int?      @map("sale_id")
  paymentId  Int?      @map("payment_id")
  paidDate   DateTime? @map("paid_date") @db.Date
  price      Float?
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  registerId Int?
  modifyId   Int?
  register   User?     @relation("PaidClient_registerId", fields: [registerId], references: [id])
  modify     User?     @relation("PaidClient_modifyId", fields: [modifyId], references: [id])
  Client     Client?   @relation(fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Sale       Sale?     @relation(fields: [saleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Payment    Payment?  @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PaidServer {
  id            Int      @id @default(autoincrement())
  serverId      Int
  endDate       DateTime
  paymentTypeId Int
  paymentType   Payment  @relation(fields: [paymentTypeId], references: [id])
  server        Server   @relation(fields: [serverId], references: [id])
  price         Float
  description   String
  isDeleted     Boolean? @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  registerId    Int?
  modifyId      Int?
  register      User?    @relation("PaidServer_registerId", fields: [registerId], references: [id])
  modify        User?    @relation("PaidServer_modifyId", fields: [modifyId], references: [id])
}

model Server {
  id          Int         @id @default(autoincrement())
  name        String?     @db.VarChar(255)
  responsible String?     @db.VarChar(255)
  plan        String?     @db.VarChar(255)
  endDate     DateTime?
  isDeleted   Boolean?    @default(false)
  createdAt   DateTime    @default(now()) @map("created")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated")
  registerId  Int?
  modifyId    Int?
  state       ServerState @default(RUNNING)

  register    User?        @relation("Server_register", fields: [registerId], references: [id])
  modify      User?        @relation("Server_modify", fields: [modifyId], references: [id])
  paidServers PaidServer[]

  @@map("servers")
}

enum ServerState {
  RUNNING
  CLOSED
}

// Uncomment if you have User relations for registerId and modifyId
// User_PaidClient_registerId User? @relation("PaidClient_registerId", fields: [registerId], references: [id])
// User_PaidClient_modifyId   User? @relation("PaidClient_modifyId", fields: [modifyId], references: [id])
model Subscribe {
  id          Int            @id @default(autoincrement())
  saleId      Int?
  sale        Sale?          @relation(fields: [saleId], references: [id])
  clientId    Int
  client      Client         @relation(fields: [clientId], references: [id])
  paying_date DateTime
  price       Float
  paid        Float
  state       SubscribeState @default(NOTPAYING)
  isDeleted   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt

  @@index([clientId], map: "FK_paid_client_client_id")
}

model Payment {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar(255)
  icon         String?        @db.VarChar(255)
  isDeleted    Boolean?       @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  register     User?          @relation("Payment_registerId", fields: [registerId], references: [id])
  modify       User?          @relation("Payment_modifyId", fields: [modifyId], references: [id])
  registerId   Int?
  modifyId     Int?
  PaidSupplier PaidSupplier[]
  PaidClient   PaidClient[]
  PaidServer   PaidServer[]

  @@map("payment")
}

model PaidOther {
  id          Int            @id @default(autoincrement())
  type        PaidOtherType
  groupId     Int
  price       Int
  description String?
  paidDate    DateTime       @default(now())
  isDeleted   Boolean        @default(false)
  group       PaidOtherGroup @relation(references: [id], fields: [groupId])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  registerId Int?
  modifyId   Int?

  register User? @relation("PaidOther_registerId", fields: [registerId], references: [id])
  modify   User? @relation("PaidOther_modifyId", fields: [modifyId], references: [id])
}

model PaidOtherGroup {
  id        Int     @id @default(autoincrement())
  name      String
  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  registerId Int?
  modifyId   Int?

  register  User?       @relation("PaidOtherGroup_registerId", fields: [registerId], references: [id])
  modify    User?       @relation("PaidOtherGroup_modifyId", fields: [modifyId], references: [id])
  PaidOther PaidOther[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  isDeleted Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User[]

  @@map("user_role")
}

enum PaidOtherType {
  INCOME
  OUTCOME
}

enum ProductType {
  SERVICE
  DEVICE
  SUBSCRIPTION
}

enum SubscribeState {
  NOTPAYING
  PAID
}

enum SaleState {
  RUNNING
  CLOSED
}

enum Role {
  ADMIN
  USER
}
