generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                     Int         @id @default(autoincrement())
  typeId                 Int?
  name                   String      @db.VarChar(255)
  inn                    String      @db.VarChar(255)
  regionId               Int?
  districtId             Int?
  address                String?     @db.VarChar(255)
  balance                Float       @default(0)
  description            String?     @db.Text
  registerId             Int?
  modifyId               Int?
  isDeleted              Boolean?    @default(false)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @default(now()) @updatedAt
  phone                  String?     @unique() @db.VarChar(255)
  District               District?   @relation(fields: [districtId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Client_modifyId   User?       @relation("Client_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Region                 Region?     @relation(fields: [regionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Client_registerId User?       @relation("Client_registerId", fields: [registerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ClientType             ClientType? @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Sale                   Sale[]

  @@index([districtId], map: "FK_client_district_id")
  @@index([modifyId], map: "FK_client_modify_id")
  @@index([regionId], map: "FK_client_region_id")
  @@index([registerId], map: "FK_client_register_id")
  @@index([typeId], map: "FK_client_type_id")
  @@map("client")
}

model ClientType {
  id                         Int      @id @default(autoincrement())
  name                       String
  creatorId                  Int?
  modifyId                   Int?
  isDeleted                  Boolean  @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @default(now()) @updatedAt
  Client                     Client[]
  User_ClientType_modifyId   User?    @relation("ClientType_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_ClientType_registerId User?    @relation("ClientType_registerId", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([modifyId], map: "FK_client_type_modify_id")
  @@index([creatorId], map: "FK_client_type_register_id")
  @@map("client_type")
}

model District {
  id       Int      @id @default(autoincrement())
  regionId Int?
  name     String?  @db.VarChar(255)
  Client   Client[]

  @@map("district")
}

model Product {
  id                     Int              @id @default(autoincrement())
  name                   String           @db.VarChar(255)
  barcode                String?          @db.VarChar(255)
  barcodeId              Int?             @unique()
  groupId                Int
  unitId                 Int?
  priceIncome            Float            @default(0)
  reminderFirst          Float            @default(0)
  price                  Float            @default(0)
  type                   ProductType
  countReminder          Float            @default(0)
  countArrived           Float            @default(0)
  countSale              Float            @default(0)
  isDeleted              Boolean?         @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @default(now())
  creatorId              Int?
  modifyId               Int?
  ProductGroup           ProductGroup     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Product_modifyId  User?            @relation("Product_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Product_creatorId User?            @relation("Product_creatorId", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ProductUnit            ProductUnit?     @relation(fields: [unitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ArrivedProduct         ArrivedProduct[]

  @@index([groupId], map: "FK_product_group_id")
  @@index([modifyId], map: "FK_product_modify_id")
  @@index([creatorId], map: "FK_product_creator_id")
  @@index([unitId], map: "FK_product_unit_id")
  @@map("product")
}

model ProductGroup {
  id                          Int       @id @default(autoincrement())
  name                        String
  isDeleted                   Boolean?  @default(false)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @default(now()) @updatedAt
  creatorId                   Int
  modifyId                    Int
  Product                     Product[]
  User_ProductGroup_modifyId  User      @relation("ProductGroup_modifyId", fields: [modifyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_ProductGroup_creatorId User      @relation("ProductGroup_creatorId", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([modifyId], map: "FK_product_type_modify_id")
  @@index([creatorId], map: "FK_product_type_creator_id")
  @@map("product_group")
}

model ProductUnit {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  isDeleted Boolean?  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Product   Product[]

  @@map("product_unit")
}

model Region {
  id     Int      @id @default(autoincrement())
  name   String?
  Client Client[]

  @@map("region")
}

model Setting {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  balance Float  @default(0)

  @@map("setting")
}

model User {
  id                                  Int            @id @default(autoincrement())
  name                                String         @db.VarChar(255)
  username                            String         @db.VarChar(255)
  password                            String         @db.VarChar(500)
  phone                               String?        @db.VarChar(255)
  roleId                              Int?
  isDeleted                           Boolean?       @default(false)
  createdAt                           DateTime       @default(now())
  updatedAt                           DateTime       @default(now()) @updatedAt
  chatId                              String?        @db.VarChar(255)
  Client_Client_modifyId              Client[]       @relation("Client_modifyId")
  Client_Client_registerId            Client[]       @relation("Client_registerId")
  ClientType_ClientType_modifyId      ClientType[]   @relation("ClientType_modifyId")
  ClientType_ClientType_registerId    ClientType[]   @relation("ClientType_registerId")
  Product_Product_modifyId            Product[]      @relation("Product_modifyId")
  Product_Product_creatorId           Product[]      @relation("Product_creatorId")
  ProductGroup_ProductGroup_modifyId  ProductGroup[] @relation("ProductGroup_modifyId")
  ProductGroup_ProductGroup_creatorId ProductGroup[] @relation("ProductGroup_creatorId")
  UserRole                            UserRole?      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([roleId], map: "FK_user_role_id")
  @@map("user")
}

model Arrived {
  id             Int              @id @default(autoincrement())
  date           DateTime?        @db.Date
  code           String?          @db.VarChar(255)
  codeId         Int?             @default(1)
  waybillNumber  String?          @map("waybill_number") @db.VarChar(255)
  supplier       Supplier         @relation(fields: [supplierId], references: [id])
  supplierId     Int              @default(1) @map("supplier_id")
  description    String?          @db.Text
  price          Float            @default(0)
  isDeleted      Boolean?         @default(false)
  created        DateTime         @default(now())
  updated        DateTime         @default(now()) @updatedAt
  registerId     Int?
  modifyId       Int?
  ArrivedProduct ArrivedProduct[]

  // You might want to add relations to User table for registerId and modifyId
  // User_Arrived_registerId User? @relation("Arrived_registerId", fields: [registerId], references: [id])
  // User_Arrived_modifyId User? @relation("Arrived_modifyId", fields: [modifyId], references: [id])

  @@map("arrived")
}

model ArrivedProduct {
  id         Int      @id @default(autoincrement())
  arrivedId  Int?     @map("arrived_id")
  productId  Int?     @map("product_id")
  count      Float    @default(0)
  price      Float?
  priceCount Float?   @map("price_count")
  isDeleted  Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  Arrived    Arrived? @relation(fields: [arrivedId], references: [id])
  Product    Product? @relation(fields: [productId], references: [id])

  @@index([arrivedId], map: "arrived_id")
  @@index([productId], map: "product_id")
  @@map("arrived_product")
}

model PaidSupplier {
  id         Int       @id @default(autoincrement())
  supplierId Int?      @map("suppler_id")
  paidDate   DateTime? @map("paid_date")
  price      Float?
  paymentId  Int?      @map("payment_id")
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  registerId Int?
  modifyId   Int?
  Payment    Payment?  @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // Assuming 'supplier' refers to a User or a dedicated Supplier model if it exists
  // User_PaidSupplier_registerId User? @relation("PaidSupplier_registerId", fields: [registerId], references: [id])
  // User_PaidSupplier_modifyId User? @relation("PaidSupplier_modifyId", fields: [modifyId], references: [id])

  @@index([paymentId], map: "payment_id")
  @@map("paid_suppler")
}

model Supplier {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  phone       String    @db.VarChar(255)
  phoneTwo    String?   @map("phone_two") @db.VarChar(255)
  description String?   @db.Text
  balance     Float     @default(0)
  isDeleted   Boolean?  @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  registerId  Int?
  modifyId    Int?
  arrived     Arrived[] // 1:N bog'lanish
  // If `register_id` and `modify_id` refer to the `User` table, uncomment and adjust these relations:
  // User_Supplier_registerId User? @relation("Supplier_registerId", fields: [registerId], references: [id])
  // User_Supplier_modifyId   User? @relation("Supplier_modifyId", fields: [modifyId], references: [id])

  @@map("suppler") // Keep the original table name mapping
}

model Sale {
  id         Int       @id @default(autoincrement())
  date       DateTime? @db.Date
  code       String?   @db.VarChar(255)
  codeId     Int?      @default(1)
  client     Client    @relation(fields: [clientId], references: [id])
  clientId   Int       @default(1) @map("client_id")
  price      Float     @default(0)
  dept       Float     @default(0)
  credit     Float     @default(0)
  state      SaleState @default(CLOSED)
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  registerId Int?
  modifyId   Int?
}

model Payment {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar(255)
  icon         String?        @db.VarChar(255)
  isDeleted    Boolean?       @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  PaidSupplier PaidSupplier[]

  @@map("payment")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  isDeleted Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User[]

  @@map("user_role")
}

enum ProductType {
  SERVICE
  DEVICE
  SUBSCRIPTION
}

enum SaleState {
  RUNNING
  CLOSED
}

enum Role {
  ADMIN
  USER
}
