import { ProductService } from './product.service';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { FindAllProductQueryDto } from './dto/findAll-product.dto';
import { Request } from 'express';
export declare class ProductController {
    private readonly productService;
    constructor(productService: ProductService);
    create(createProductDto: CreateProductDto, req: Request): Promise<{
        type: import(".prisma/client").$Enums.ProductType;
        name: string;
        isDeleted: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        registerId: number | null;
        modifyId: number | null;
        barcode: string | null;
        groupId: number;
        unitId: number | null;
        priceIncome: number;
        reminderFirst: number;
        price: number;
        barcodeId: number | null;
        countReminder: number;
        countArrived: number;
        countSale: number;
    }>;
    findAll(dto: FindAllProductQueryDto): Promise<{
        total: number;
        page: number;
        limit: number;
        data: {
            type: import(".prisma/client").$Enums.ProductType;
            name: string;
            isDeleted: boolean | null;
            createdAt: Date;
            updatedAt: Date;
            id: number;
            registerId: number | null;
            modifyId: number | null;
            barcode: string | null;
            groupId: number;
            unitId: number | null;
            priceIncome: number;
            reminderFirst: number;
            price: number;
            barcodeId: number | null;
            countReminder: number;
            countArrived: number;
            countSale: number;
        }[];
    }>;
    findOne(id: string): Promise<{
        type: import(".prisma/client").$Enums.ProductType;
        name: string;
        isDeleted: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        registerId: number | null;
        modifyId: number | null;
        barcode: string | null;
        groupId: number;
        unitId: number | null;
        priceIncome: number;
        reminderFirst: number;
        price: number;
        barcodeId: number | null;
        countReminder: number;
        countArrived: number;
        countSale: number;
    }>;
    update(id: string, updateProductDto: UpdateProductDto): Promise<{
        type: import(".prisma/client").$Enums.ProductType;
        name: string;
        isDeleted: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        registerId: number | null;
        modifyId: number | null;
        barcode: string | null;
        groupId: number;
        unitId: number | null;
        priceIncome: number;
        reminderFirst: number;
        price: number;
        barcodeId: number | null;
        countReminder: number;
        countArrived: number;
        countSale: number;
    }>;
    remove(id: string): Promise<{
        type: import(".prisma/client").$Enums.ProductType;
        name: string;
        isDeleted: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        registerId: number | null;
        modifyId: number | null;
        barcode: string | null;
        groupId: number;
        unitId: number | null;
        priceIncome: number;
        reminderFirst: number;
        price: number;
        barcodeId: number | null;
        countReminder: number;
        countArrived: number;
        countSale: number;
    }>;
}
